    };

    const resetForm = () => {
        setStep(1);
        setSelectedMeetingType("");
        setSelectedDay(null);
        setSelectedTime("");
        setFormData({ name: "", email: "", phone: "", company: "", message: "" });
    };

    return (
        <div className="container py-5">
            {/* Header */}
            <div className="text-center mb-5">
                <h1 className="fw-bold">Schedule a Meeting</h1>
                <p className="lead">
                    Book a consultation with our team to discuss how we can help grow your
                    business
                </p>
            </div>

            {/* Step Progress */}
            <div className="d-flex justify-content-center mb-4">
                {[1, 2, 3].map((num) => (
                    <div key={num} className="d-flex align-items-center">
                        <div
                            className={`rounded-circle d-flex justify-content-center align-items-center me-2`}
                            style={{
                                width: "40px",
                                height: "40px",
                                background: step >= num ? "#0d6efd" : "#dee2e6",
                                color: step >= num ? "#fff" : "#6c757d",
                                fontWeight: "500",
                            }}
                        >
                            {num}
                        </div>
                        {num < 3 && <div style={{ width: "40px", height: "2px", background: step > num ? "#0d6efd" : "#dee2e6" }} />}
                    </div>
                ))}
            </div>

            <div className="mx-auto" style={{ maxWidth: "900px" }}>
                {/* Step 1: Meeting Type */}
                {step === 1 && (
                    <Card className="shadow-sm p-4">
                        <h4 className="text-center mb-4">Choose Meeting Type</h4>
                        <Row>
                            {meetingTypes.map((type) => (
                                <Col md={4} key={type.id}>
                                    <Card
                                        className={`mb-3 text-center shadow-sm ${selectedMeetingType === type.id ? "border-primary" : ""
                                            }`}
                                        onClick={() => setSelectedMeetingType(type.id)}
                                        style={{ cursor: "pointer" }}
                                    >
                                        <Card.Body>
                                            <h5 className="fw-semibold">{type.title}</h5>
                                            <Badge bg="secondary" className="mb-2">
                                                {type.duration}
                                            </Badge>
                                            <p className="text-muted small">{type.description}</p>
                                        </Card.Body>
                                    </Card>
                                </Col>
                            ))}
                        </Row>
                        <div className="text-center mt-4">
                            <Button
                                disabled={!selectedMeetingType}
                                onClick={() => setStep(2)}
                            >
                                Continue
                            </Button>
                        </div>
                    </Card>
                )}

                {/* Step 2: Date + Time */}
                {step === 2 && (
                    <Card className="shadow-sm p-4 border-0 bg-light bg-opacity-75">
                        <h4 className="text-center mb-4 d-flex align-items-center justify-content-center gap-2">
                            <i className="bi bi-calendar text-primary me-2"></i>
                            Select Date & Time
                        </h4>
                        <p className="text-center text-muted mb-4">
                            Choose your preferred date and time slot
                        </p>

                        <Row className="g-4">
                            {/* Date Selection */}
                            <Col md={6}>
                                <h6 className="fw-semibold mb-3">Select Date</h6>
                                <div className="d-grid gap-2">
                                    {["Today", "Tomorrow", "Dec 20", "Dec 21", "Dec 22", "Dec 23"].map(
                                        (date) => (
                                            <Button
                                                key={date}
                                                variant={selectedDay === date ? "primary" : "outline-secondary"}
                                                className="py-2"
                                                onClick={() => setSelectedDay(date)}
                                            >
                                                {date}
                                            </Button>
                                        )
                                    )}
                                </div>
                            </Col>

                            {/* Time Selection */}
                            <Col md={6}>
                                <h6 className="fw-semibold mb-3">Available Times</h6>
                                <div className="d-grid gap-2">
                                    {timeSlots.map((slot) => (
                                        <Button
                                            key={slot.id}
                                            variant={selectedTime === slot.time ? "primary" : "outline-secondary"}
                                            className="d-flex align-items-center justify-content-center py-2 position-relative"
                                            disabled={!slot.available}
                                            onClick={() => slot.available && setSelectedTime(slot.time)}
                                        >
                                            <i className="bi bi-clock me-2"></i>
                                            {slot.time}
                                            {!slot.available && (
                                                <span
                                                    className="position-absolute top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center bg-secondary bg-opacity-25 rounded text-muted small"
                                                    style={{ cursor: "not-allowed" }}
                                                >
                                                    Booked
                                                </span>
                                            )}
                                        </Button>
                                    ))}
                                </div>
                            </Col>
                        </Row>

                        <div className="d-flex justify-content-between mt-4">
                            <Button variant="outline-secondary" onClick={() => setStep(1)}>
                                Back
                            </Button>
                            <Button
                                onClick={() => setStep(3)}
                                disabled={!selectedDay || !selectedTime}
                            >
                                Continue
                            </Button>
                        </div>
                    </Card>
                )}


                {/* Step 3: User Info */}
                {step === 3 && (
                    <Card className="shadow-sm p-4">
                        <h4 className="text-center mb-4">Your Information</h4>
                        <Form onSubmit={handleSubmit}>
                            <Row>
                                <Col md={6} className="mb-3">
                                    <Form.Label>Full Name *</Form.Label>
                                    <Form.Control
                                        type="text"
                                        value={formData.name}
                                        onChange={(e) =>
                                            setFormData({ ...formData, name: e.target.value })
                                        }
                                        required
                                    />
                                </Col>
                                <Col md={6} className="mb-3">
                                    <Form.Label>Email *</Form.Label>
                                    <Form.Control
                                        type="email"
                                        value={formData.email}
                                        onChange={(e) =>
                                            setFormData({ ...formData, email: e.target.value })
                                        }
                                        required
                                    />
                                </Col>
                                <Col md={6} className="mb-3">
                                    <Form.Label>Phone</Form.Label>
                                    <Form.Control
                                        type="tel"
                                        value={formData.phone}
                                        onChange={(e) =>
                                            setFormData({ ...formData, phone: e.target.value })
                                        }
                                    />
                                </Col>
                                <Col md={6} className="mb-3">
                                    <Form.Label>Company</Form.Label>
                                    <Form.Control
                                        type="text"
                                        value={formData.company}
                                        onChange={(e) =>
                                            setFormData({ ...formData, company: e.target.value })
                                        }
                                    />
                                </Col>
                            </Row>
                            <Form.Group className="mb-3">
                                <Form.Label>Message (Optional)</Form.Label>
                                <Form.Control
                                    as="textarea"
                                    rows={3}
                                    value={formData.message}
                                    onChange={(e) =>
                                        setFormData({ ...formData, message: e.target.value })
                                    }
                                />
                            </Form.Group>

                            {/* Summary */}
                            <Card className="p-3 mb-3 bg-light">
                                <h6>Meeting Summary</h6>
                                <p className="small mb-1">
                                    <strong>Type:</strong>{" "}
                                    {meetingTypes.find((t) => t.id === selectedMeetingType)?.title}
                                </p>
                                <p className="small mb-1">
                                    <strong>Date:</strong> {currentMonth} {selectedDay},{" "}
                                    {currentYear}
                                </p>
                                <p className="small mb-1">
                                    <strong>Time:</strong> {selectedTime}
                                </p>
                                <p className="small">
                                    <strong>Duration:</strong>{" "}
                                    {
                                        meetingTypes.find((t) => t.id === selectedMeetingType)
                                            ?.duration
                                    }
                                </p>
                            </Card>

                            <div className="d-flex justify-content-between">
                                <Button variant="outline-secondary" onClick={() => setStep(2)}>
                                    Back
                                </Button>
                                <Button type="submit">Book Meeting</Button>
                            </div>
                        </Form>
                    </Card>
                )}

                {/* Step 4: Confirmation */}
                {step === 4 && (
                    <Card className="shadow-sm p-5 text-center">
                        <h3 className="mb-3 text-success">✅ Meeting Booked!</h3>
                        <p>Your meeting has been successfully scheduled.</p>
                        <Card className="p-3 mb-4 bg-light">
                            <h6>Meeting Details</h6>
                            <p>
                                <strong>Meeting:</strong>{" "}
                                {meetingTypes.find((t) => t.id === selectedMeetingType)?.title}
                            </p>
                            <p>
                                <strong>Date:</strong> {currentMonth} {selectedDay},{" "}
                                {currentYear}
                            </p>
                            <p>
                                <strong>Time:</strong> {selectedTime}
                            </p>
                            <p>
                                <strong>Attendee:</strong> {formData.name}
                            </p>
                            <p>
                                <strong>Email:</strong> {formData.email}
                            </p>
                        </Card>
                        <Button variant="outline-secondary" onClick={resetForm} className="me-2">
                            Schedule Another Meeting
                        </Button>
                        <Button>Add to Calendar</Button>
                    </Card>
                )}
            </div>
        </div>
    );
}
import React from "react";
import "bootstrap/dist/css/bootstrap.min.css";
import "./App.css";

function App() {
  const tickets = [
    {
      id: "#TC-192",
      subject: "Help, I order wrong product...",
      priority: "High",
      type: "Incident",
      client: "Sante Carlazo",
      date: "07/11/2023, 06:25AM",
    },
    {
      id: "#TC-191",
      subject: "My Suggestion for this product",
      priority: "Low",
      type: "Suggestion",
      client: "Fast Response",
      date: "06/11/2023, 11:47PM",
    },
    {
      id: "#TC-190",
      subject: "Can I use the TV in bathroom?",
      priority: "Medium",
      type: "Question",
      client: "Arlene McCoy",
      date: "06/11/2023, 05:13AM",
    },
  ];

  return (
    <div className="d-flex dashboard">
      {/* Sidebar */}
      <div className="sidebar p-3">
        <h5 className="mb-4">Fikri Studio</h5>
        <ul className="list-unstyled">
          <li className="active">Dashboard</li>
          <li>Inbox</li>
          <li>Notification</li>
          <li>Ticket</li>
          <li>Knowledge Base</li>
          <li>Customer</li>
          <li>Forum</li>
          <li>Report</li>
        </ul>
      </div>

      {/* Main Content */}
      <div className="main-content p-3 flex-grow-1">
        <div className="d-flex justify-content-between align-items-center mb-3">
          <h4>Ticket</h4>
          <button className="btn btn-success">+ Add Ticket</button>
        </div>

        {/* Search & Filters */}
        <div className="d-flex mb-3 flex-wrap">
          <input
            type="text"
            className="form-control me-2 mb-2"
            placeholder="Search"
            style={{ maxWidth: "250px" }}
          />
          <select className="form-select me-2 mb-2" style={{ maxWidth: "150px" }}>
            <option>Type</option>
            <option>Incident</option>
            <option>Question</option>
            <option>Suggestion</option>
          </select>
          <select className="form-select me-2 mb-2" style={{ maxWidth: "150px" }}>
            <option>Priority</option>
            <option>Low</option>
            <option>Medium</option>
            <option>High</option>
          </select>
        </div>

        {/* Tickets Table */}
        <div className="table-responsive">
          <table className="table table-hover align-middle">
            <thead className="table-light">
              <tr>
                <th>Ticket ID</th>
                <th>Subject</th>
                <th>Priority</th>
                <th>Type</th>
                <th>Client</th>
                <th>Request Date</th>
              </tr>
            </thead>
            <tbody>
              {tickets.map((t, idx) => (
                <tr key={idx}>
                  <td>{t.id}</td>
                  <td>{t.subject}</td>
                  <td>
                    <span
                      className={`badge ${
                        t.priority === "High"
                          ? "bg-danger"
                          : t.priority === "Medium"
                          ? "bg-warning text-dark"
                          : "bg-success"
                      }`}
                    >
                      {t.priority}
                    </span>
                  </td>
                  <td>{t.type}</td>
                  <td>{t.client}</td>
                  <td>{t.date}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}

export default App;





"use client"

import { useState } from "react"
import "bootstrap/dist/css/bootstrap.min.css"
import {
  PieChart,
  Pie,
  Cell,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  AreaChart,
  Area,
} from "recharts"

const ProjectPortfolioDashboard = () => {
  const [activeFilter, setActiveFilter] = useState("All")

  // Sample data for charts
  const portfolioBalanceData = [
    { name: "Cost Avoidance", value: 18.2 },
    { name: "Maintaining", value: 23.5 },
    { name: "Cost Re...", value: 13.2 },
    { name: "Growth", value: 21.9 },
    { name: "Sustaining", value: 23.2 },
  ]

  const budgetByFundingData = [
    { name: "Estates", value: 45 },
    { name: "Faculty", value: 32 },
    { name: "Finance", value: 28 },
    { name: "HR", value: 35 },
    { name: "IT", value: 42 },
  ]

  const approvedBudgetByQuarter = [
    { quarter: "Q1", Estates: 15, Faculty: 12, Finance: 10, HR: 8, IT: 14 },
    { quarter: "Q2", Estates: 18, Faculty: 14, Finance: 12, HR: 10, IT: 16 },
    { quarter: "Q3", Estates: 20, Faculty: 16, Finance: 14, HR: 12, IT: 18 },
    { quarter: "Q4", Estates: 22, Faculty: 18, Finance: 16, HR: 14, IT: 20 },
  ]

  const portfolioBudgetsByTime = [
    { quarter: "Q1", Estates: 15, Faculty: 12, Finance: 10, HR: 8, IT: 14 },
    { quarter: "Q2", Estates: 16, Faculty: 13, Finance: 11, HR: 9, IT: 15 },
    { quarter: "Q3", Estates: 17, Faculty: 14, Finance: 12, HR: 10, IT: 16 },
    { quarter: "Q4", Estates: 18, Faculty: 15, Finance: 13, HR: 11, IT: 17 },
  ]

  const resourceEffortData = [
    { team: "2019", "App Dev": 80, Architecture: 60, "Business Analysis": 70, Infrastructure: 50, Operations: 40 },
    { team: "2020", "App Dev": 90, Architecture: 70, "Business Analysis": 80, Infrastructure: 60, Operations: 50 },
    { team: "2021", "App Dev": 100, Architecture: 80, "Business Analysis": 90, Infrastructure: 70, Operations: 60 },
  ]

  const projectsData = [
    {
      id: "PR00001",
      title: "New Student Mobile Application",
      status: "Green",
      approvedBudget: "£662,114",
      actualCost: "£49,030",
      estimateToComplete: "£379,879",
      variance: "£33,205",
    },
    {
      id: "PR00002",
      title: "Research Systems Re-Platform",
      status: "Green",
      approvedBudget: "£767,130",
      actualCost: "£189,300",
      estimateToComplete: "£445,191",
      variance: "£152,839",
    },
    {
      id: "PR00003",
      title: "HR System Replacement",
      status: "Green",
      approvedBudget: "£682,848",
      actualCost: "£213,919",
      estimateToComplete: "£631,747",
      variance: "£-162,818",
    },
    {
      id: "PR00004",
      title: "Student Journey CRM Project",
      status: "Green",
      approvedBudget: "£1,398,345",
      actualCost: "£1,112,095",
      estimateToComplete: "£99,682",
      variance: "£187,068",
    },
    {
      id: "PR00005",
      title: "Learner Analytics",
      status: "Green",
      approvedBudget: "£335,610",
      actualCost: "£73,090",
      estimateToComplete: "£99,620",
      variance: "£167,100",
    },
  ]

  const COLORS = ["#FF6B6B", "#FFA500", "#4CAF50", "#2196F3", "#9C27B0"]

  return (
    <div className="bg-light min-vh-100 p-4">
      <div className="container-fluid">
        {/* Header */}
        <div className="row mb-4">
          <div className="col-12">
            <div className="d-flex align-items-center gap-3 mb-3">
              <div className="bg-primary p-2 rounded" style={{ width: "50px", height: "50px" }}>
                <span className="text-white fw-bold">M</span>
              </div>
              <div>
                <h1 className="mb-0 fw-bold">Project Portfolio Dashboard</h1>
                <p className="text-muted mb-0">MAXICA CONSULTING - Business & IT Management Consultancy</p>
              </div>
            </div>
          </div>
        </div>

        {/* Filter Buttons */}
        <div className="row mb-4">
          <div className="col-12">
            <div className="d-flex gap-2 flex-wrap">
              {["Estates", "Faculty", "Finance", "HR", "IT"].map((filter) => (
                <button
                  key={filter}
                  className={`btn btn-sm ${activeFilter === filter ? "btn-primary" : "btn-outline-primary"}`}
                  onClick={() => setActiveFilter(filter)}
                >
                  {filter}
                </button>
              ))}
            </div>
          </div>
        </div>

        {/* Summary Cards */}
        <div className="row mb-4">
          <div className="col-md-3">
            <div className="card border-0 shadow-sm">
              <div className="card-body">
                <h6 className="text-muted mb-2">Status</h6>
                <div className="d-flex gap-3">
                  <div>
                    <p className="mb-1">
                      <strong>Active</strong>
                    </p>
                    <p className="text-success fw-bold">35</p>
                  </div>
                  <div>
                    <p className="mb-1">
                      <strong>Total</strong>
                    </p>
                    <p className="text-primary fw-bold">48</p>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div className="col-md-3">
            <div className="card border-0 shadow-sm">
              <div className="card-body">
                <h6 className="text-muted mb-2">Status Summary</h6>
                <div className="d-flex flex-column gap-2">
                  <div className="d-flex justify-content-between">
                    <span className="badge bg-danger">Red</span>
                    <span className="fw-bold">12</span>
                  </div>
                  <div className="d-flex justify-content-between">
                    <span className="badge bg-warning">Amber</span>
                    <span className="fw-bold">6</span>
                  </div>
                  <div className="d-flex justify-content-between">
                    <span className="badge bg-success">Green</span>
                    <span className="fw-bold">31</span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div className="col-md-6">
            <div className="card border-0 shadow-sm">
              <div className="card-body">
                <h6 className="text-muted mb-3">Portfolio Risk Score</h6>
                <div className="row">
                  <div className="col-6">
                    <div className="bg-warning p-3 rounded text-center mb-2">
                      <p className="mb-0 text-white fw-bold" style={{ fontSize: "24px" }}>
                        4.04
                      </p>
                      <small className="text-white">Portfolio Risk Score</small>
                    </div>
                  </div>
                  <div className="col-6">
                    <div className="bg-warning p-3 rounded text-center">
                      <p className="mb-0 text-white fw-bold" style={{ fontSize: "24px" }}>
                        4.47
                      </p>
                      <small className="text-white">Portfolio Risk (Last)</small>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Charts Row 1 */}
        <div className="row mb-4">
          <div className="col-md-6">
            <div className="card border-0 shadow-sm">
              <div className="card-body">
                <h6 className="card-title mb-3">Portfolio Balance</h6>
                <ResponsiveContainer width="100%" height={300}>
                  <PieChart>
                    <Pie
                      data={portfolioBalanceData}
                      cx="50%"
                      cy="50%"
                      labelLine={false}
                      label={({ name, value }) => `${name}: ${value}%`}
                      outerRadius={80}
                      fill="#8884d8"
                      dataKey="value"
                    >
                      {portfolioBalanceData.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                      ))}
                    </Pie>
                    <Tooltip />
                  </PieChart>
                </ResponsiveContainer>
              </div>
            </div>
          </div>

          <div className="col-md-6">
            <div className="card border-0 shadow-sm">
              <div className="card-body">
                <h6 className="card-title mb-3">Project Budget by Funding Entity</h6>
                <ResponsiveContainer width="100%" height={300}>
                  <BarChart data={budgetByFundingData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" />
                    <YAxis />
                    <Tooltip />
                    <Bar dataKey="value" fill="#8884d8" />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </div>
          </div>
        </div>

        {/* Charts Row 2 */}
        <div className="row mb-4">
          <div className="col-md-6">
            <div className="card border-0 shadow-sm">
              <div className="card-body">
                <h6 className="card-title mb-3">Approved Budget by Quarter</h6>
                <ResponsiveContainer width="100%" height={300}>
                  <BarChart data={approvedBudgetByQuarter}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="quarter" />
                    <YAxis />
                    <Tooltip />
                    <Legend />
                    <Bar dataKey="Estates" stackId="a" fill="#FF6B6B" />
                    <Bar dataKey="Faculty" stackId="a" fill="#FFA500" />
                    <Bar dataKey="Finance" stackId="a" fill="#4CAF50" />
                    <Bar dataKey="HR" stackId="a" fill="#2196F3" />
                    <Bar dataKey="IT" stackId="a" fill="#9C27B0" />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </div>
          </div>

          <div className="col-md-6">
            <div className="card border-0 shadow-sm">
              <div className="card-body">
                <h6 className="card-title mb-3">Portfolio Budgets by Time</h6>
                <ResponsiveContainer width="100%" height={300}>
                  <AreaChart data={portfolioBudgetsByTime}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="quarter" />
                    <YAxis />
                    <Tooltip />
                    <Legend />
                    <Area type="monotone" dataKey="Estates" stackId="1" fill="#FF6B6B" />
                    <Area type="monotone" dataKey="Faculty" stackId="1" fill="#FFA500" />
                    <Area type="monotone" dataKey="Finance" stackId="1" fill="#4CAF50" />
                    <Area type="monotone" dataKey="HR" stackId="1" fill="#2196F3" />
                    <Area type="monotone" dataKey="IT" stackId="1" fill="#9C27B0" />
                  </AreaChart>
                </ResponsiveContainer>
              </div>
            </div>
          </div>
        </div>

        {/* Projects Table */}
        <div className="row mb-4">
          <div className="col-12">
            <div className="card border-0 shadow-sm">
              <div className="card-body">
                <h6 className="card-title mb-3">Project Details</h6>
                <div className="table-responsive">
                  <table className="table table-sm table-hover mb-0">
                    <thead className="table-light">
                      <tr>
                        <th>Project Code</th>
                        <th>Project Title</th>
                        <th>Status</th>
                        <th>Approved Budget</th>
                        <th>Actual Cost</th>
                        <th>Estimate to Complete</th>
                        <th>Variance</th>
                      </tr>
                    </thead>
                    <tbody>
                      {projectsData.map((project) => (
                        <tr key={project.id}>
                          <td className="fw-bold">{project.id}</td>
                          <td>{project.title}</td>
                          <td>
                            <span className={`badge bg-${project.status === "Green" ? "success" : "warning"}`}>
                              {project.status}
                            </span>
                          </td>
                          <td>{project.approvedBudget}</td>
                          <td>{project.actualCost}</td>
                          <td>{project.estimateToComplete}</td>
                          <td className="text-success fw-bold">{project.variance}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Resource Effort Chart */}
        <div className="row mb-4">
          <div className="col-12">
            <div className="card border-0 shadow-sm">
              <div className="card-body">
                <h6 className="card-title mb-3">Resource Effort vs Capacity by Team (hours)</h6>
                <ResponsiveContainer width="100%" height={300}>
                  <BarChart data={resourceEffortData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="team" />
                    <YAxis />
                    <Tooltip />
                    <Legend />
                    <Bar dataKey="App Dev" fill="#FF6B6B" />
                    <Bar dataKey="Architecture" fill="#FFA500" />
                    <Bar dataKey="Business Analysis" fill="#4CAF50" />
                    <Bar dataKey="Infrastructure" fill="#2196F3" />
                    <Bar dataKey="Operations" fill="#9C27B0" />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default ProjectPortfolioDashboard

