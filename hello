CREATE TABLE contacts (
  id SERIAL PRIMARY KEY,
  name TEXT NOT NULL,
  email TEXT NOT NULL,
  message TEXT NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);



const pool = require('../dbConnect'); // adjust path to your db connection

const submitContact = async (req, res) => {
  try {
    const { name, email, message } = req.body;

    if (!name || !email || !message) {
      return res.status(400).json({ message: 'All fields are required' });
    }

    const insertQuery = `
      INSERT INTO contacts (name, email, message)
      VALUES ($1, $2, $3)
      RETURNING *
    `;

    const values = [name, email, message];
    const result = await pool.query(insertQuery, values);

    return res.status(200).json({
      message: 'Contact submitted successfully',
      contact: result.rows[0],
    });

  } catch (error) {
    console.error('Contact submission error:', error);
    return res.status(500).json({ message: 'Internal server error' });
  }
};

module.exports = { submitContact };





"use client"

import type React from "react"

import { useState } from "react"
import { Form } from "react-bootstrap"
import { TextField, Button, InputAdornment, Typography, Box, MenuItem, Alert } from "@mui/material"
import { Person, Email, Subject, Message } from "@mui/icons-material"

const subjects = ["General Inquiry", "Technical Support", "Billing Question", "Feature Request", "Other"]

export default function ContactForm() {
  const [name, setName] = useState("")
  const [email, setEmail] = useState("")
  const [subject, setSubject] = useState("")
  const [message, setMessage] = useState("")
  const [nameError, setNameError] = useState("")
  const [emailError, setEmailError] = useState("")
  const [subjectError, setSubjectError] = useState("")
  const [messageError, setMessageError] = useState("")
  const [submitSuccess, setSubmitSuccess] = useState(false)

  const validateEmail = (email: string) => {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    return re.test(email)
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()

    // Reset errors
    setNameError("")
    setEmailError("")
    setSubjectError("")
    setMessageError("")
    setSubmitSuccess(false)

    // Validate name
    if (!name) {
      setNameError("Name is required")
      return
    }

    // Validate email
    if (!email) {
      setEmailError("Email is required")
      return
    } else if (!validateEmail(email)) {
      setEmailError("Please enter a valid email address")
      return
    }

    // Validate subject
    if (!subject) {
      setSubjectError("Please select a subject")
      return
    }

    // Validate message
    if (!message) {
      setMessageError("Message is required")
      return
    } else if (message.length < 10) {
      setMessageError("Message must be at least 10 characters")
      return
    }

    // If validation passes, show success message
    // In a real app, you would send the form data to a server
    setSubmitSuccess(true)

    // Clear form after successful submission
    // setName('')
    // setEmail('')
    // setSubject('')
    // setMessage('')
  }

  return (
    <Box>
      <Typography variant="h4" component="h1" gutterBottom align="center" sx={{ fontWeight: 600 }}>
        Get In Touch
      </Typography>
      <Typography variant="body1" gutterBottom align="center" color="text.secondary" sx={{ mb: 3 }}>
        We'd love to hear from you. Please fill out the form below.
      </Typography>

      {submitSuccess && (
        <Alert severity="success" sx={{ mb: 3 }}>
          Your message has been sent successfully! We'll get back to you soon.
        </Alert>
      )}

      <Form onSubmit={handleSubmit}>
        <TextField
          fullWidth
          label="Full Name"
          variant="outlined"
          margin="normal"
          value={name}
          onChange={(e) => setName(e.target.value)}
          error={!!nameError}
          helperText={nameError}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <Person color="action" />
              </InputAdornment>
            ),
          }}
        />

        <TextField
          fullWidth
          label="Email Address"
          variant="outlined"
          margin="normal"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          error={!!emailError}
          helperText={emailError}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <Email color="action" />
              </InputAdornment>
            ),
          }}
        />

        <TextField
          select
          fullWidth
          label="Subject"
          variant="outlined"
          margin="normal"
          value={subject}
          onChange={(e) => setSubject(e.target.value)}
          error={!!subjectError}
          helperText={subjectError}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <Subject color="action" />
              </InputAdornment>
            ),
          }}
        >
          {subjects.map((option) => (
            <MenuItem key={option} value={option}>
              {option}
            </MenuItem>
          ))}
        </TextField>

        <TextField
          fullWidth
          label="Message"
          variant="outlined"
          margin="normal"
          multiline
          rows={4}
          value={message}
          onChange={(e) => setMessage(e.target.value)}
          error={!!messageError}
          helperText={messageError}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start" sx={{ alignSelf: "flex-start", mt: 1.5 }}>
                <Message color="action" />
              </InputAdornment>
            ),
          }}
        />

        <Button
          type="submit"
          variant="contained"
          color="secondary"
          fullWidth
          size="large"
          sx={{
            py: 1.5,
            textTransform: "none",
            fontWeight: 600,
            fontSize: "1rem",
            mt: 2,
          }}
        >
          Send Message
        </Button>
      </Form>
    </Box>
  )
}



"use client"

import type React from "react"

import { useState } from "react"
import { Form } from "react-bootstrap"
import { TextField, Button, InputAdornment, IconButton, Typography, Box, Divider, Alert } from "@mui/material"
import { Visibility, VisibilityOff, Email, Lock, Google, Facebook, Apple } from "@mui/icons-material"

export default function LoginForm() {
  const [showPassword, setShowPassword] = useState(false)
  const [email, setEmail] = useState("")
  const [password, setPassword] = useState("")
  const [emailError, setEmailError] = useState("")
  const [passwordError, setPasswordError] = useState("")
  const [loginSuccess, setLoginSuccess] = useState(false)

  const handleClickShowPassword = () => {
    setShowPassword(!showPassword)
  }

  const validateEmail = (email: string) => {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    return re.test(email)
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()

    // Reset errors
    setEmailError("")
    setPasswordError("")
    setLoginSuccess(false)

    // Validate email
    if (!email) {
      setEmailError("Email is required")
      return
    } else if (!validateEmail(email)) {
      setEmailError("Please enter a valid email address")
      return
    }

    // Validate password
    if (!password) {
      setPasswordError("Password is required")
      return
    } else if (password.length < 6) {
      setPasswordError("Password must be at least 6 characters")
      return
    }

    // If validation passes, show success message
    // In a real app, you would handle authentication here
    setLoginSuccess(true)

    // Clear form after successful submission
    // setEmail('')
    // setPassword('')
  }

  return (
    <Box>
      <Typography variant="h4" component="h1" gutterBottom align="center" sx={{ fontWeight: 600 }}>
        Welcome Back
      </Typography>
      <Typography variant="body1" gutterBottom align="center" color="text.secondary" sx={{ mb: 3 }}>
        Please login to access your account
      </Typography>

      {loginSuccess && (
        <Alert severity="success" sx={{ mb: 3 }}>
          Login successful!
        </Alert>
      )}

      <Form onSubmit={handleSubmit}>
        <TextField
          fullWidth
          label="Email Address"
          variant="outlined"
          margin="normal"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          error={!!emailError}
          helperText={emailError}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <Email color="action" />
              </InputAdornment>
            ),
          }}
        />

        <TextField
          fullWidth
          label="Password"
          variant="outlined"
          margin="normal"
          type={showPassword ? "text" : "password"}
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          error={!!passwordError}
          helperText={passwordError}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <Lock color="action" />
              </InputAdornment>
            ),
            endAdornment: (
              <InputAdornment position="end">
                <IconButton aria-label="toggle password visibility" onClick={handleClickShowPassword} edge="end">
                  {showPassword ? <VisibilityOff /> : <Visibility />}
                </IconButton>
              </InputAdornment>
            ),
          }}
        />

        <Box sx={{ textAlign: "right", mt: 1, mb: 3 }}>
          <Typography variant="body2" color="primary" sx={{ cursor: "pointer" }}>
            Forgot Password?
          </Typography>
        </Box>

        <Button
          type="submit"
          variant="contained"
          color="primary"
          fullWidth
          size="large"
          sx={{
            py: 1.5,
            textTransform: "none",
            fontWeight: 600,
            fontSize: "1rem",
            mb: 3,
          }}
        >
          Login
        </Button>

        <Divider sx={{ my: 2 }}>
          <Typography variant="body2" color="text.secondary">
            OR CONTINUE WITH
          </Typography>
        </Divider>

        <Box sx={{ display: "flex", justifyContent: "space-between", gap: 2, mt: 3 }}>
          <Button variant="outlined" startIcon={<Google />} fullWidth sx={{ textTransform: "none" }}>
            Google
          </Button>
          <Button variant="outlined" startIcon={<Facebook />} fullWidth sx={{ textTransform: "none" }}>
            Facebook
          </Button>
          <Button variant="outlined" startIcon={<Apple />} fullWidth sx={{ textTransform: "none" }}>
            Apple
          </Button>
        </Box>

        <Box sx={{ textAlign: "center", mt: 3 }}>
          <Typography variant="body2">
            Don't have an account?{" "}
            <Typography component="span" variant="body2" color="primary" sx={{ cursor: "pointer", fontWeight: 600 }}>
              Sign Up
            </Typography>
          </Typography>
        </Box>
      </Form>
    </Box>
  )
}



page.tsx

"use client"

import type React from "react"

import { useState } from "react"
import { Container, Row, Col } from "react-bootstrap"
import LoginForm from "@/components/login-form"
import ContactForm from "@/components/contact-form"
import "bootstrap/dist/css/bootstrap.min.css"
import { ThemeProvider, createTheme } from "@mui/material/styles"
import { CssBaseline, Paper, Box, Tabs, Tab } from "@mui/material"

const theme = createTheme({
  palette: {
    primary: {
      main: "#6a1b9a",
    },
    secondary: {
      main: "#26a69a",
    },
  },
  typography: {
    fontFamily: '"Poppins", "Roboto", "Helvetica", "Arial", sans-serif',
  },
})

export default function Home() {
  const [activeTab, setActiveTab] = useState(0)

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setActiveTab(newValue)
  }

  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <div
        className="min-vh-100 d-flex align-items-center py-5"
        style={{
          background: "linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)",
        }}
      >
        <Container>
          <Row className="justify-content-center">
            <Col md={10} lg={8}>
              <Paper elevation={3} sx={{ borderRadius: "16px", overflow: "hidden" }}>
                <Box
                  sx={{
                    borderBottom: 1,
                    borderColor: "divider",
                    backgroundColor: theme.palette.primary.main,
                    color: "white",
                  }}
                >
                  <Tabs
                    value={activeTab}
                    onChange={handleTabChange}
                    variant="fullWidth"
                    textColor="inherit"
                    TabIndicatorProps={{
                      style: {
                        backgroundColor: "white",
                      },
                    }}
                  >
                    <Tab label="Login" />
                    <Tab label="Contact Us" />
                  </Tabs>
                </Box>
                <Box sx={{ p: 4 }}>
                  {activeTab === 0 && <LoginForm />}
                  {activeTab === 1 && <ContactForm />}
                </Box>
              </Paper>
            </Col>
          </Row>
        </Container>
      </div>
    </ThemeProvider>
  )
}


layout.tsx

    import type React from "react"
import type { Metadata } from "next"
import { Inter } from "next/font/google"
import "./globals.css"

const inter = Inter({ subsets: ["latin"] })

export const metadata: Metadata = {
  title: "Contact & Login Page",
  description: "Beautiful contact and login page built with React, Bootstrap and Material UI",
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <head>
        <link
          href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap"
          rel="stylesheet"
        />
      </head>
      <body className={inter.className}>{children}</body>
    </html>
  )
}



global.css

    @tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    box-sizing: border-box;
    padding: 0;
    margin: 0;
    @apply border-border;
  }
  html,
  body {
    max-width: 100vw;
    overflow-x: hidden;
    height: 100%;
    @apply bg-background text-foreground;
  }
}
