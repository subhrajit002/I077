const saveMenuData = () => {
  // 1. Create a fresh sequence starting from highest existing seq + 1
  const getMaxSeq = (items) => {
    let max = 0;
    items.forEach(item => {
      if (item.seq && parseInt(item.seq) > max) max = parseInt(item.seq);
      if (item.children) {
        const childMax = getMaxSeq(item.children);
        if (childMax > max) max = childMax;
      }
    });
    return max;
  };
  
  let currentSeq = getMaxSeq(navPane);

  // 2. Merge data while preserving hierarchy
  const mergeWithSequencing = (existingItems, newItems, parentId = null) => {
    const merged = [...existingItems];
    
    newItems.forEach(newItem => {
      // Find matching existing item (by ID or name+parent)
      const existingIndex = merged.findIndex(existing => 
        existing.id === newItem.id || 
        (existing.displayName === newItem.displayName && existing.parentId === parentId)
      );

      if (existingIndex >= 0) {
        // Update existing item
        currentSeq++;
        merged[existingIndex] = {
          ...merged[existingIndex],
          ...newItem,
          seq: currentSeq.toString(),
          children: mergeWithSequencing(merged[existingIndex].children, newItem.children, newItem.id)
        };
      } else {
        // Add new item with proper sequencing
        currentSeq++;
        merged.push({
          ...newItem,
          seq: currentSeq.toString(),
          parentId,
          children: mergeWithSequencing([], newItem.children, newItem.id)
        });
      }
    });

    return merged;
  };

  const mergedData = mergeWithSequencing(navPane, menuData);

  // 3. Prepare API payload
  const traverseMenu = (items, subLevel = 0) => {
    return items.flatMap(item => {
      const type = item.hasSubModel ? "Folder" : "UG_Instance";
      const baseItem = {
        userid,
        module: 'Dp',
        type,
        instance_name: item.hasSubModel ? item.displayName : item.selectedItems[0] || null,
        seq: item.seq,
        sub_level: subLevel.toString(),
        display_name: item.displayName,
        id: item.id
      };

      const children = item.hasSubModel && item.children.length > 0 
        ? traverseMenu(item.children, subLevel + 1)
        : [];

      return [baseItem, ...children];
    });
  };

  const payload = traverseMenu(mergedData);
  console.log('Final Payload with Sequencing:', payload);

  // 4. Save to backend
  addHavSettings(payload);
  
  // 5. Update state
  setNavPane(mergedData);
  setMenuData([]);
};
