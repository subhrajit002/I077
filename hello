const mergeIntoNavPane = (existingNavPane, newItems) => {
  const merged = JSON.parse(JSON.stringify(existingNavPane));

  // Improved find function that checks hierarchy
  const findItem = (items, itemToFind) => {
    // First try to find by ID
    for (const item of items) {
      if (item.id === itemToFind.id) return { item, items };
    }

    // Then try to find by name and exact parent chain
    for (const item of items) {
      if (item.displayName === itemToFind.displayName) {
        // Verify full parent chain matches
        if (isSameHierarchy(item, itemToFind)) {
          return { item, items };
        }
      }
      if (item.children.length > 0) {
        const found = findItem(item.children, itemToFind);
        if (found.item) return found;
      }
    }
    return { item: null, items };
  };

  // Helper to verify parent hierarchy
  const isSameHierarchy = (item1, item2) => {
    if (item1.parentId !== item2.parentId) return false;
    if (!item1.parentId && !item2.parentId) return true;
    
    // Find and compare parents recursively
    const findParent = (items, id) => {
      for (const item of items) {
        if (item.id === id) return item;
        if (item.children.length > 0) {
          const found = findParent(item.children, id);
          if (found) return found;
        }
      }
      return null;
    };

    const parent1 = findParent(merged, item1.parentId);
    const parent2 = findParent(merged, item2.parentId);
    
    return parent1 && parent2 && parent1.displayName === parent2.displayName;
  };

  // Rest of your merge logic...
};
